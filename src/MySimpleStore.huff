
#define function setValue(uint256) nonpayable returns ()
#define function getValue() nonpayable returns (uint256)

#define constant VALUE = FREE_STORAGE_POINTER()

#define macro SET_VALUE() = takes(0) returns(0) {
  // Read uint256 from calldata,
  // remembering to skip bytes4 to allow for function selector!

  0x04         // [0x04]
  calldataload // [value]

  // Get pointer and store
  [VALUE]      // [value_ptr, value]
  sstore       // []
}

#define macro GET_VALUE() = takes(0) returns(0) {
  // Get uint256 from storage
  [VALUE]      // [value_ptr]
  sload        // [value]

  // Store return value in memory
  0x00         // [0x00, value]
  mstore       // []

  // Return first 32 bytes of memory (containing our uint256)
  0x20         // [0x20]
  0x00         // [0x00, 0x20]

  // Remember, we return from memory, and the two parameters are:
  // - Starting memory location
  // - Length of memory to return
  return       // []
}

#define macro MAIN() = takes(0) returns(0) {
  // Get the function selector
  0x00 calldataload 0xe0 shr

  // Compare function selector to setValue(uint256)
  dup1 __FUNC_SIG(setValue) eq setValue jumpi

  // Compare function selector to getValue()
  dup1 __FUNC_SIG(getValue) eq getValue jumpi

  // dispatch
  setValue:
    SET_VALUE()
  getValue:
    GET_VALUE()

  0x00 0x00 revert
}
